services:
  api: &main_app
    build:
      context: .
      dockerfile: ./Dockerfile
      target: prod
    image: {{cookiecutter.project_name}}:{{"${" }}{{cookiecutter.project_name | upper }}_VERSION:-latest{{"}"}}
    restart: always
    env_file:
      - .env
    {%- if cookiecutter.traefik_labels == "True" %}
    labels:
      # Enables traefik for this container.
      - traefik.enable=true
      - traefik.http.routers.{{cookiecutter.project_name}}.rule=Host(`{{ "${" }}{{cookiecutter.project_name | upper}}_TRAEFIK_HOST:-{{cookiecutter.project_name}}.localhost{{ "}" }}`)
      - traefik.http.routers.{{cookiecutter.project_name}}.entrypoints=http
      - traefik.http.routers.{{cookiecutter.project_name}}.service={{cookiecutter.project_name}}
      - traefik.http.services.{{cookiecutter.project_name}}.loadbalancer.server.port={{ "${" }}{{cookiecutter.project_name | upper}}_PORT:-8000{{ "}" }}
    networks:
      - default
      - traefik-shared
    {%- endif %}
    {%- if ((cookiecutter.db_info.name != "none" and cookiecutter.db_info.name != "sqlite") or
            (cookiecutter.enable_redis == "True") or
            (cookiecutter.enable_rmq == "True") or
            (cookiecutter.enable_kafka == "True")) %}
    depends_on:
      {%- if cookiecutter.db_info.name != "none" %}
      {%- if cookiecutter.db_info.name != "sqlite" %}
      db:
        condition: service_healthy
      {%- endif %}
      {%- endif %}
      {%- if cookiecutter.enable_redis == "True" %}
      redis:
        condition: service_healthy
      {%- endif %}
      {%- if cookiecutter.enable_rmq == "True" %}
      rmq:
        condition: service_healthy
      {%- endif %}
      {%- if cookiecutter.enable_kafka == "True" %}
      kafka:
        condition: service_healthy
      {%- endif %}
    {%- endif %}
    environment:
      {{cookiecutter.project_name | upper }}_HOST: 0.0.0.0
      {%- if cookiecutter.db_info.name != "none" %}
      {%- if cookiecutter.db_info.name == "sqlite" %}
      {{cookiecutter.project_name | upper }}_DB_FILE: /db_data/db.sqlite3
      {%- else %}
      {{cookiecutter.project_name | upper}}_DB_HOST: {{cookiecutter.project_name}}-db
      {{cookiecutter.project_name | upper}}_DB_PORT: {{cookiecutter.db_info.port}}
      {{cookiecutter.project_name | upper}}_DB_USER: {{cookiecutter.project_name}}
      {{cookiecutter.project_name | upper}}_DB_PASS: {{cookiecutter.project_name}}
      {%- if cookiecutter.db_info.name == "mongodb" %}
      {{cookiecutter.project_name | upper}}_DB_BASE: admin
      {%- else %}
      {{cookiecutter.project_name | upper}}_DB_BASE: {{cookiecutter.project_name}}
      {%- endif %}
      {%- endif %}
      {%- endif %}
      {%- if cookiecutter.enable_rmq == 'True' %}
      {{cookiecutter.project_name | upper }}_RABBIT_HOST: {{cookiecutter.project_name}}-rmq
      {%- endif %}
      {%- if cookiecutter.enable_redis == 'True' %}
      {{cookiecutter.project_name | upper }}_REDIS_HOST: {{cookiecutter.project_name}}-redis
      {%- endif %}
      {%- if cookiecutter.enable_kafka == "True" %}
      TESTKAFKA_KAFKA_BOOTSTRAP_SERVERS: '["{{cookiecutter.project_name}}-kafka:9092"]'
      {%- endif %}
    {%- if cookiecutter.db_info.name == "sqlite" %}
    volumes:
      - {{cookiecutter.project_name}}-db-data:/db_data/
    {%- endif %}

  {%- if cookiecutter.enable_taskiq == "True" %}

  taskiq-worker:
    <<: *main_app
    labels: []
    command:
      - taskiq
      - worker
      - {{cookiecutter.project_name}}.tkq:broker
  {%- endif %}

  {%- if cookiecutter.db_info.name == "postgresql" %}

  db:
    image: {{cookiecutter.db_info.image}}
    hostname: {{cookiecutter.project_name}}-db
    environment:
      POSTGRES_PASSWORD: "{{cookiecutter.project_name}}"
      POSTGRES_USER: "{{cookiecutter.project_name}}"
      POSTGRES_DB: "{{cookiecutter.project_name}}"
    volumes:
      - {{cookiecutter.project_name}}-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U {{cookiecutter.project_name}}
      interval: 2s
      timeout: 3s
      retries: 40
  {%- endif %}

  {%- if cookiecutter.db_info.name == "mongodb"%}
  db:
    image: {{cookiecutter.db_info.image}}
    hostname: {{cookiecutter.project_name}}-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "{{cookiecutter.project_name}}"
      MONGO_INITDB_ROOT_PASSWORD: "{{cookiecutter.project_name}}"
    command: "mongod"
    volumes:
      - {{cookiecutter.project_name}}-db-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 40
  {%- endif %}

  {%- if cookiecutter.db_info.name == "mysql" %}

  db:
    image: {{cookiecutter.db_info.image}}
    hostname: {{cookiecutter.project_name}}-db
    restart: always
    environment:
      MYSQL_ROOT_USER: "root"
      MYSQL_ROOT_PASSWORD: "{{cookiecutter.project_name}}"
      MYSQL_USER: "{{cookiecutter.project_name}}"
      MYSQL_PASSWORD: "{{cookiecutter.project_name}}"
      MYSQL_DATABASE: "{{cookiecutter.project_name}}"
      MYSQL_HOST: "0.0.0.0"
    healthcheck:
      test:
        - CMD
        - mysqladmin
        - ping
        - --user={{cookiecutter.project_name}}
        - --password={{cookiecutter.project_name}}
      interval: 10s
      timeout: 5s
      retries: 40
    volumes:
      - "{{cookiecutter.project_name}}-db-data:/bitnami/mysql/data"
  {%- endif %}

  {%- if cookiecutter.enable_migrations == 'True' %}

  migrator:
    image: {{cookiecutter.project_name}}:{{"${" }}{{cookiecutter.project_name | upper }}_VERSION:-latest{{"}"}}
    restart: "no"
    {%- if cookiecutter.orm in ['sqlalchemy', 'ormar'] %}
    command: alembic upgrade head
    {%- elif cookiecutter.orm == 'tortoise' %}
    command: aerich upgrade
    {%- elif cookiecutter.orm == 'piccolo' %}
    command: piccolo migrations forwards all
    {%- endif %}
    {%- if cookiecutter.db_info.name == "sqlite" %}
    environment:
      {{cookiecutter.project_name | upper }}_DB_FILE: /db_data/db.sqlite3
      {%- if cookiecutter.orm == 'piccolo' %}
      PICCOLO_CONF: "{{cookiecutter.project_name}}.piccolo_conf"
      {%- endif %}
    volumes:
      - {{cookiecutter.project_name}}-db-data:/db_data/
    {%- else %}
    environment:
      {{cookiecutter.project_name | upper}}_DB_HOST: {{cookiecutter.project_name}}-db
      {{cookiecutter.project_name | upper}}_DB_PORT: {{cookiecutter.db_info.port}}
      {{cookiecutter.project_name | upper}}_DB_USER: {{cookiecutter.project_name}}
      {{cookiecutter.project_name | upper}}_DB_PASS: {{cookiecutter.project_name}}
      {{cookiecutter.project_name | upper}}_DB_BASE: {{cookiecutter.project_name}}
    {%- if cookiecutter.orm == 'piccolo' %}
      PICCOLO_CONF: "{{cookiecutter.project_name}}.piccolo_conf"
    {%- endif %}
    {%- endif %}
    {%- if cookiecutter.db_info.name != "sqlite" %}
    depends_on:
      db:
        condition: service_healthy
    {%- endif %}
  {%- endif %}

  {%- if cookiecutter.enable_redis == "True" %}

  redis:
    image: bitnami/redis:6.2.5
    hostname: "{{cookiecutter.project_name}}-redis"
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50
  {%- endif %}

  {%- if cookiecutter.enable_rmq == "True" %}

  rmq:
    image: rabbitmq:3.9.16-alpine
    hostname: "{{cookiecutter.project_name}}-rmq"
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "/"
    healthcheck:
      test: rabbitmq-diagnostics check_running -q
      interval: 3s
      timeout: 3s
      retries: 50
  {%- endif %}

  {%- if cookiecutter.enable_kafka == "True" %}

  kafka:
    image: bitnami/kafka:3.7.1-debian-12-r0
    hostname: "{{cookiecutter.project_name}}-kafka"
    environment:
      KAFKA_CFG_NODE_ID: "0"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@{{cookiecutter.project_name}}-kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    # Uncomment it to connect from localhost.
    # ports:
    #   - 9094:9094
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092
      interval: 1s
      timeout: 3s
      retries: 30

  {%- endif %}

{% if cookiecutter.db_info.name != 'none' %}

volumes:
  {{cookiecutter.project_name}}-db-data:
    name: {{cookiecutter.project_name}}-db-data
{%- endif %}

{%- if cookiecutter.traefik_labels == "True" %}

networks:
  # Network for traefik.
  traefik-shared:
    name: traefik-shared
{%- endif %}
